# Generated by Django 5.2.6 on 2025-09-16 21:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProduceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('unit_of_measurement', models.CharField(default='kg', max_length=20)),
                ('carbon_footprint_factor', models.DecimalField(decimal_places=2, default=1.0, help_text='Carbon footprint multiplier for this produce type', max_digits=5)),
            ],
            options={
                'verbose_name_plural': 'Produce Categories',
            },
        ),
        migrations.CreateModel(
            name='Farmer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farmer_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('farm_name', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=300)),
                ('gps_coordinates', models.CharField(blank=True, help_text='Latitude,Longitude', max_length=100)),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('mpesa_number', models.CharField(help_text='M-Pesa phone number for payments', max_length=20)),
                ('certification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('certified_organic', 'Certified Organic'), ('eco_friendly', 'Eco-Friendly Certified')], default='pending', max_length=50)),
                ('carbon_credits_earned', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('eco_practices', models.JSONField(blank=True, default=list, help_text='List of eco-friendly practices adopted')),
                ('sustainability_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hedera_account_id', models.CharField(blank=True, max_length=50, null=True)),
                ('wallet_address', models.CharField(blank=True, max_length=100, null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='farmer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-registration_date'],
            },
        ),
        migrations.CreateModel(
            name='CarbonCredit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('credits_earned', models.DecimalField(decimal_places=2, max_digits=10)),
                ('credit_type', models.CharField(choices=[('organic_farming', 'Organic Farming'), ('water_conservation', 'Water Conservation'), ('renewable_energy', 'Renewable Energy Use'), ('reforestation', 'Reforestation'), ('soil_management', 'Sustainable Soil Management'), ('waste_reduction', 'Waste Reduction')], max_length=50)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('issued', 'Issued'), ('redeemed', 'Redeemed')], default='pending', max_length=20)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verifier_name', models.CharField(blank=True, max_length=200)),
                ('credit_value_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_status', models.CharField(choices=[('unpaid', 'Unpaid'), ('paid', 'Paid')], default='unpaid', max_length=20)),
                ('nft_token_id', models.CharField(blank=True, max_length=100, null=True)),
                ('blockchain_certificate_hash', models.CharField(blank=True, max_length=256, null=True)),
                ('issue_date', models.DateTimeField(auto_now_add=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carbon_credits', to='farmtracker.farmer')),
            ],
            options={
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='Produce',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('produce_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(default='kg', max_length=20)),
                ('quality_grade', models.CharField(choices=[('A', 'Grade A'), ('B', 'Grade B'), ('C', 'Grade C')], default='B', max_length=10)),
                ('price_per_unit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('harvest_date', models.DateField()),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('organic_certified', models.BooleanField(default=False)),
                ('pesticide_free', models.BooleanField(default=False)),
                ('water_efficient', models.BooleanField(default=False)),
                ('carbon_neutral', models.BooleanField(default=False)),
                ('eco_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('blockchain_hash', models.CharField(blank=True, max_length=256, null=True)),
                ('smart_contract_id', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('in_transit', 'In Transit'), ('at_market', 'At Market'), ('sold', 'Sold'), ('expired', 'Expired')], default='registered', max_length=20)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='produces', to='farmtracker.farmer')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='farmtracker.producecategory')),
            ],
            options={
                'ordering': ['-registration_date'],
            },
        ),
        migrations.CreateModel(
            name='QRCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('qr_data', models.TextField()),
                ('qr_image_url', models.URLField(blank=True, null=True)),
                ('scan_count', models.IntegerField(default=0)),
                ('last_scanned', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('produce', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='qr_code', to='farmtracker.produce')),
            ],
        ),
        migrations.CreateModel(
            name='ConsumerVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('consumer_name', models.CharField(blank=True, max_length=200)),
                ('consumer_email', models.EmailField(blank=True, max_length=254)),
                ('consumer_phone', models.CharField(blank=True, max_length=20)),
                ('verification_method', models.CharField(choices=[('qr_scan', 'QR Code Scan'), ('manual_code', 'Manual Code Entry'), ('nfc', 'NFC Tag'), ('blockchain', 'Blockchain Verification')], max_length=50)),
                ('verification_status', models.CharField(choices=[('authentic', 'Authentic'), ('suspicious', 'Suspicious'), ('counterfeit', 'Counterfeit')], default='authentic', max_length=20)),
                ('verification_location', models.CharField(blank=True, max_length=200)),
                ('gps_coordinates', models.CharField(blank=True, max_length=100)),
                ('quality_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True)),
                ('verified_at', models.DateTimeField(auto_now_add=True)),
                ('produce', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to='farmtracker.produce')),
                ('qr_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='farmtracker.qrcode')),
            ],
            options={
                'ordering': ['-verified_at'],
            },
        ),
        migrations.CreateModel(
            name='TrackingPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('location_name', models.CharField(max_length=200)),
                ('location_type', models.CharField(choices=[('farm', 'Farm'), ('collection_center', 'Collection Center'), ('warehouse', 'Warehouse'), ('transport', 'In Transport'), ('market', 'Market'), ('retailer', 'Retailer'), ('consumer', 'Consumer')], max_length=50)),
                ('gps_coordinates', models.CharField(blank=True, max_length=100)),
                ('handler_name', models.CharField(blank=True, max_length=200)),
                ('handler_contact', models.CharField(blank=True, max_length=50)),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, help_text='Temperature in Celsius', max_digits=5, null=True)),
                ('humidity', models.DecimalField(blank=True, decimal_places=2, help_text='Humidity percentage', max_digits=5, null=True)),
                ('condition_notes', models.TextField(blank=True)),
                ('verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(blank=True, max_length=50)),
                ('verification_hash', models.CharField(blank=True, max_length=256, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('produce', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_points', to='farmtracker.produce')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('buyer_name', models.CharField(max_length=200)),
                ('buyer_contact', models.CharField(blank=True, max_length=50)),
                ('buyer_type', models.CharField(choices=[('consumer', 'End Consumer'), ('retailer', 'Retailer'), ('wholesaler', 'Wholesaler'), ('processor', 'Processor')], max_length=50)),
                ('quantity_sold', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('fair_trade_premium', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('carbon_credit_bonus', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('final_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('bank', 'Bank Transfer'), ('cash', 'Cash'), ('crypto', 'Cryptocurrency')], default='mpesa', max_length=50)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('mpesa_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('smart_contract_executed', models.BooleanField(default=False)),
                ('blockchain_transaction_hash', models.CharField(blank=True, max_length=256, null=True)),
                ('hedera_consensus_timestamp', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='farmtracker.farmer')),
                ('produce', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='farmtracker.produce')),
            ],
            options={
                'ordering': ['-transaction_date'],
            },
        ),
    ]
